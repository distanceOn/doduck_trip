stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - deploy

# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - pnpm build
#     - echo "Compile complete."

# default: # Default parameters for every job
#   image: node:18-buster-slim
#   before_script: # These actions run before every job (more information on https://pnpm.io/next/continuous-integration#gitlab-ci)
#     - corepack enable
#     - corepack prepare pnpm@latest-8 --activate
#     - pnpm config set store-dir .pnpm-store

lint-test-job:   # This job also runs in the test stage.
  image: node:18-buster-slim
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-8 --activate
    - pnpm config set store-dir .pnpm-store
  script:
    - echo "Linting code... This will take about 10 seconds."
    - pnpm add eslint 
    - pnpm lint
    - echo "No lint issues found."
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'

build-develop:       # This job runs in the build stage, which runs first.
  image: node:18-buster-slim
  stage: build
  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-8 --activate
    - pnpm config set store-dir .pnpm-store
    - cat "$STAGE_ENV_FILE" >> ${CI_PROJECT_DIR}/.env
  script:
    - echo "Compiling the code..."
    - pnpm install # install dependencies
    - pnpm build
    - echo "Compile complete."
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - .pnpm-store
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"


# Deploy stage jobs
build-stage:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.20.0-debug
    entrypoint: [""]
  before_script:
    - cat "$STAGE_ENV_FILE" >> ${CI_PROJECT_DIR}/.env
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(echo -n "json_key:${CI_REGISTRY_KEY}" | base64 | tr -d '\n' )\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY}/${CI_PROJECT_PATH}:stage-${CI_COMMIT_SHORT_SHA}"
      --destination "${CI_REGISTRY}/${CI_PROJECT_PATH}:stage"
  rules:
    - if: '$CI_COMMIT_BRANCH == "stage"'

build-prod:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.20.0-debug
    entrypoint: [""]
  before_script:
    - cat "$PROD_ENV_FILE" >> ${CI_PROJECT_DIR}/.env
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(echo -n "json_key:${CI_REGISTRY_KEY}" | base64 | tr -d '\n' )\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY}/${CI_PROJECT_PATH}:prod-${CI_COMMIT_SHORT_SHA}"
      --destination "${CI_REGISTRY}/${CI_PROJECT_PATH}:latest"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'


# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
